generator client {
  provider      = "prisma-client-js"
  output        = "../app/api/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  firebaseUid String    @unique
  role        UserRoles @default(CLIENT)
  email       String    @unique
  isActive    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  image       String?

  patient       Patient?
  legalGuardian LegalGuardian?
  professional  Professional?
  admin         Admin?
  root          Root?

  createdEvents    Event[]   @relation("EventCreator")
  createdProcesses Process[] @relation("ProcessCreator")
}

model Clinic {
  id            Int            @id @default(autoincrement())
  name          String
  address       String
  phone         String?
  isActive      Boolean        @default(false)
  professionals Professional[] @relation("ProfessionalClinics")
  patients      Patient[]      @relation("PatientClinics")
  admins        Admin[]        @relation("AdminClinics")
  roots         Root[]         @relation("RootClinics")
  events        Event[]        @relation("EventClinics")
}

model Patient {
  id                  Int            @id @default(autoincrement())
  firstName           String
  lastName            String
  address             String
  email               String?
  dni                 String         @unique
  cuil                String         @unique
  dniProcessingNumber String
  birthday            DateTime
  phone               String
  affiliateNumber     String
  patientType         PatientType?
  patientStatus       PatientStatus?
  isActive            Boolean        @default(false)
  createdAt           DateTime       @default(now())

  userId Int?  @unique
  user   User? @relation(fields: [userId], references: [id])

  legalGuardianId Int?
  legalGuardian   LegalGuardian? @relation(fields: [legalGuardianId], references: [id])

  events    Event[]
  admission Admission?

  healthInsuranceProviderId Int?
  healthInsuranceProvider   HealthInsuranceProvider? @relation(fields: [healthInsuranceProviderId], references: [id])
  clinics                   Clinic[]                 @relation("PatientClinics")
}

model HealthInsuranceProvider {
  id            Int     @id @default(autoincrement())
  nickName      String?
  name          String  @unique
  description   String
  contractor    String?
  subcontractor String?
  cuit          String
  address       String
  phone         String
  contact       String?
  webside       String?
  email         String?
  email2        String?
  email3        String?

  authorizations HealthInsuranceAuthorization[]
  patients       Patient[]
  legalGuardians LegalGuardian[]
  professionals  Professional[]
}

model HealthInsuranceAuthorization {
  id                        Int                     @id @default(autoincrement())
  healthInsuranceProviderId Int
  healthInsuranceProvider   HealthInsuranceProvider @relation(fields: [healthInsuranceProviderId], references: [id])

  admissionId Int
  admission   Admission @relation(fields: [admissionId], references: [id])

  coverageServiceId Int
  coverageService   CoverageService @relation(fields: [coverageServiceId], references: [id])

  periodFrom   DateTime
  periodTo     DateTime
  authorizedAt DateTime
}

model CoverageService {
  id   Int    @id @default(autoincrement())
  name String @unique

  authorizations HealthInsuranceAuthorization[]
}

model LegalGuardian {
  id                   Int                  @id @default(autoincrement())
  firstName            String
  lastName             String
  address              String
  dni                  String
  cuil                 String
  dniProcessingNumber  String
  birthday             DateTime
  phone                String
  professionalActivity String
  legalGuardianType    LegalGuardianType?
  legalGuardianStatus  LegalGuardianStatus?
  isActive             Boolean              @default(false)
  createdAt            DateTime             @default(now())

  userId Int?  @unique
  user   User? @relation(fields: [userId], references: [id])

  patients                  Patient[]
  healthInsuranceProviderId Int?
  healthInsuranceProvider   HealthInsuranceProvider? @relation(fields: [healthInsuranceProviderId], references: [id])
  admissions                Admission[]
}

model Professional {
  id                   Int      @id @default(autoincrement())
  firstName            String
  lastName             String
  address              String
  email                String?
  dni                  String   @unique
  cuil                 String   @unique
  birthday             DateTime
  phone                String
  professionalActivity String
  isActive             Boolean  @default(false)
  licenseNumber        String   @unique // Matricula

  userId Int?  @unique
  user   User? @relation(fields: [userId], references: [id])

  events    Event[]
  schedules Schedule[]

  professionalTypes ProfessionalType[] @relation("ProfessionalToType")

  healthInsuranceProviderId Int?
  healthInsuranceProvider   HealthInsuranceProvider? @relation(fields: [healthInsuranceProviderId], references: [id])

  consultationPrices ConsultationPrice[]
  clinics            Clinic[]            @relation("ProfessionalClinics")
}

model ProfessionalType {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  professionals Professional[] @relation("ProfessionalToType")
}

model ConsultationPrice {
  id          Int      @id @default(autoincrement())
  price       Float
  currency    String   @default("ARS")
  sessionType String // ej: "online", "presencial", "terapia grupal"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  professionalId Int
  professional   Professional @relation(fields: [professionalId], references: [id])
}

model Admin {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String?
  address   String
  birthday  DateTime
  phone     String
  isActive  Boolean  @default(false)

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  clinics Clinic[] @relation("AdminClinics")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Root {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String?
  address   String
  birthday  DateTime
  phone     String
  isActive  Boolean  @default(false)

  userId  Int      @unique
  user    User     @relation(fields: [userId], references: [id])
  clinics Clinic[] @relation("RootClinics")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admission {
  id               Int           @id @default(autoincrement()) // Nro. de ingreso
  operationDate    DateTime      @default(now()) // Fecha operaci√≥n
  admissionDate    DateTime // Fecha ingreso editable
  admissionTypeId  Int
  admissionType    AdmissionType @relation(fields: [admissionTypeId], references: [id]) // Tipo de ingreso
  isSchoolEnrolled Boolean // Escolarizado
  schoolShift      SchoolShift? // Turno colegio
  schoolStartTime  DateTime? // Hora de inicio de clases
  schoolEndTime    DateTime? // Hora de fin de clases

  patientId         Int              @unique
  patient           Patient          @relation(fields: [patientId], references: [id])
  cud               String?          @unique
  cudExpirationDate DateTime?
  status            AdmissionStatus?

  legalGuardianId Int?
  legalGuardian   LegalGuardian? @relation(fields: [legalGuardianId], references: [id])

  createdAt                     DateTime                       @default(now())
  healthInsuranceAuthorizations HealthInsuranceAuthorization[]
}

model Event {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  startEvent  DateTime
  endEvent    DateTime
  eventType   EventType   @default(ON_SITE)
  createdAt   DateTime    @default(now())
  status      EventStatus @default(AVAILABLE)

  createdById Int
  createdBy   User @relation("EventCreator", fields: [createdById], references: [id])

  professionalId Int
  professional   Professional @relation(fields: [professionalId], references: [id])

  patientId Int?
  patient   Patient? @relation(fields: [patientId], references: [id])

  clinicId Int?
  clinic   Clinic? @relation("EventClinics", fields: [clinicId], references: [id])
}

model Process {
  id            Int           @id @default(autoincrement())
  title         String
  description   String?
  processType   ProcessType
  processStatus ProcessStatus
  createdAt     DateTime      @default(now())

  createdById Int
  createdBy   User @relation("ProcessCreator", fields: [createdById], references: [id])
}

model Budget {
  id           Int           @id @default(autoincrement())
  budgetStatus BudgetStatus?
}

model PaymentEvent {
  id                Int         @id @default(autoincrement())
  amount            Int
  paymentType       PaymentType
  description       String?
  status            String?
  transactionNumber String?

  createdAt DateTime @default(now())
}

model Schedule {
  id             Int          @id @default(autoincrement())
  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId Int
  dayOfWeek      WeekDay
  startTime      String // format: "08:00"
  endTime        String // format: "12:00"
  sessionTime    Int          @default(30)
  repeatsWeekly  Boolean      @default(true)
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
}

enum UserRoles {
  ROOT
  ADMIN
  CLIENT
  PROFESSIONAL
}

enum PatientType {
  CHILD
  ADULT
  SENIOR
}

enum PatientStatus {
  ACTIVE
  INACTIVE
  DISCHARGED
  PENDING
}

enum LegalGuardianType {
  PARENT
  SIBLING
  OTHER
}

enum LegalGuardianStatus {
  ACTIVE
  INACTIVE
  VERIFIED
  UNVERIFIED
}

enum AdmissionStatus {
  PENDING_DOCUMENTATION
  DOCUMENTS_COMPLETED
  ADMITTED
  REJECTED
}

enum ProcessType {
  INITIAL
  FOLLOW_UP
  FINAL
}

enum ProcessStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum BudgetStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentType {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  TRANSFER
  OTHER
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum EventStatus {
  AVAILABLE
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum EventType {
  ONLINE
  ON_SITE
}

model AdmissionType {
  id   Int    @id @default(autoincrement())
  name String // Ej: "Obra Social", "Particular", "Familiar", "Empleado"

  admissions Admission[]
}

enum SchoolShift {
  MORNING
  AFTERNOON
  EVENING
  FULL_DAY
}

enum LegalGuardianCondition {
  RELACION_DEPENDENCIA
  MONOTRIBUTISTA
  OTROS
}
