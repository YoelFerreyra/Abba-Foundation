
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firebaseUid: 'firebaseUid',
  role: 'role',
  email: 'email',
  isActive: 'isActive',
  createdAt: 'createdAt',
  image: 'image'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  address: 'address',
  dni: 'dni',
  cuil: 'cuil',
  dniProcessingNumber: 'dniProcessingNumber',
  birthday: 'birthday',
  phone: 'phone',
  affiliateNumber: 'affiliateNumber',
  professionalActivity: 'professionalActivity',
  patientType: 'patientType',
  patientStatus: 'patientStatus',
  isActive: 'isActive',
  createdAt: 'createdAt',
  userId: 'userId',
  legalGuardianId: 'legalGuardianId',
  healthInsuranceProviderId: 'healthInsuranceProviderId'
};

exports.Prisma.HealthInsuranceProviderScalarFieldEnum = {
  id: 'id',
  nickName: 'nickName',
  name: 'name',
  description: 'description',
  contractor: 'contractor',
  subcontractor: 'subcontractor',
  cuit: 'cuit',
  address: 'address',
  phone: 'phone',
  contact: 'contact',
  webside: 'webside',
  email: 'email',
  email2: 'email2',
  email3: 'email3'
};

exports.Prisma.HealthInsuranceAuthorizationScalarFieldEnum = {
  id: 'id',
  healthInsuranceProviderId: 'healthInsuranceProviderId',
  admissionId: 'admissionId',
  service: 'service',
  periodFrom: 'periodFrom',
  periodTo: 'periodTo',
  authorizedAt: 'authorizedAt'
};

exports.Prisma.LegalGuardianScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  address: 'address',
  dni: 'dni',
  cuil: 'cuil',
  dniProcessingNumber: 'dniProcessingNumber',
  birthday: 'birthday',
  phone: 'phone',
  professionalActivity: 'professionalActivity',
  legalGuardianType: 'legalGuardianType',
  legalGuardianStatus: 'legalGuardianStatus',
  isActive: 'isActive',
  createdAt: 'createdAt',
  userId: 'userId',
  healthInsuranceProviderId: 'healthInsuranceProviderId'
};

exports.Prisma.ProfessionalScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  address: 'address',
  dni: 'dni',
  cuil: 'cuil',
  birthday: 'birthday',
  phone: 'phone',
  professionalActivity: 'professionalActivity',
  isActive: 'isActive',
  licenseNumber: 'licenseNumber',
  userId: 'userId',
  healthInsuranceProviderId: 'healthInsuranceProviderId'
};

exports.Prisma.ProfessionalTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.ConsultationPriceScalarFieldEnum = {
  id: 'id',
  price: 'price',
  currency: 'currency',
  sessionType: 'sessionType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  professionalId: 'professionalId'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  address: 'address',
  birthday: 'birthday',
  phone: 'phone',
  isActive: 'isActive',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RootScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  address: 'address',
  birthday: 'birthday',
  phone: 'phone',
  isActive: 'isActive',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdmissionScalarFieldEnum = {
  id: 'id',
  operationDate: 'operationDate',
  admissionDate: 'admissionDate',
  admissionTypeId: 'admissionTypeId',
  isSchoolEnrolled: 'isSchoolEnrolled',
  schoolShift: 'schoolShift',
  patientId: 'patientId',
  cud: 'cud',
  cudExpirationDate: 'cudExpirationDate',
  status: 'status',
  legalGuardianId: 'legalGuardianId',
  createdAt: 'createdAt'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  startEvent: 'startEvent',
  endEvent: 'endEvent',
  eventType: 'eventType',
  createdAt: 'createdAt',
  status: 'status',
  createdById: 'createdById',
  professionalId: 'professionalId',
  patientId: 'patientId'
};

exports.Prisma.ProcessScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  processType: 'processType',
  processStatus: 'processStatus',
  createdAt: 'createdAt',
  createdById: 'createdById'
};

exports.Prisma.BudgetScalarFieldEnum = {
  id: 'id',
  budgetStatus: 'budgetStatus'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  paymentType: 'paymentType',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.ScheduleScalarFieldEnum = {
  id: 'id',
  professionalId: 'professionalId',
  dayOfWeek: 'dayOfWeek',
  startTime: 'startTime',
  endTime: 'endTime',
  sessionTime: 'sessionTime',
  repeatsWeekly: 'repeatsWeekly',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.AdmissionTypeScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRoles = exports.$Enums.UserRoles = {
  ROOT: 'ROOT',
  ADMIN: 'ADMIN',
  CLIENT: 'CLIENT',
  PROFESSIONAL: 'PROFESSIONAL'
};

exports.PatientType = exports.$Enums.PatientType = {
  CHILD: 'CHILD',
  ADULT: 'ADULT',
  SENIOR: 'SENIOR'
};

exports.PatientStatus = exports.$Enums.PatientStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  DISCHARGED: 'DISCHARGED',
  PENDING: 'PENDING'
};

exports.CoverageService = exports.$Enums.CoverageService = {
  PSYCHOLOGY: 'PSYCHOLOGY',
  PSYCHOPEDAGOGY: 'PSYCHOPEDAGOGY',
  SPEECH_THERAPY: 'SPEECH_THERAPY',
  SUPPORT_TEACHER_MODULE: 'SUPPORT_TEACHER_MODULE',
  OCCUPATIONAL_THERAPY: 'OCCUPATIONAL_THERAPY',
  PSYCHOMOTOR_THERAPY: 'PSYCHOMOTOR_THERAPY',
  THERAPY_TRANSPORT: 'THERAPY_TRANSPORT',
  SCHOOL_TRANSPORT: 'SCHOOL_TRANSPORT',
  INTENSIVE_INTEGRAL_MODULE: 'INTENSIVE_INTEGRAL_MODULE',
  SIMPLE_INTEGRAL_MODULE: 'SIMPLE_INTEGRAL_MODULE',
  SCHOOL_INCLUSION_SUPPORT_MODULE: 'SCHOOL_INCLUSION_SUPPORT_MODULE'
};

exports.LegalGuardianType = exports.$Enums.LegalGuardianType = {
  PARENT: 'PARENT',
  SIBLING: 'SIBLING',
  OTHER: 'OTHER'
};

exports.LegalGuardianStatus = exports.$Enums.LegalGuardianStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  VERIFIED: 'VERIFIED',
  UNVERIFIED: 'UNVERIFIED'
};

exports.SchoolShift = exports.$Enums.SchoolShift = {
  MORNING: 'MORNING',
  AFTERNOON: 'AFTERNOON',
  EVENING: 'EVENING'
};

exports.AdmissionStatus = exports.$Enums.AdmissionStatus = {
  PENDING_DOCUMENTATION: 'PENDING_DOCUMENTATION',
  DOCUMENTS_COMPLETED: 'DOCUMENTS_COMPLETED',
  ADMITTED: 'ADMITTED',
  REJECTED: 'REJECTED'
};

exports.EventType = exports.$Enums.EventType = {
  ONLINE: 'ONLINE',
  ON_SITE: 'ON_SITE'
};

exports.EventStatus = exports.$Enums.EventStatus = {
  AVAILABLE: 'AVAILABLE',
  SCHEDULED: 'SCHEDULED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED'
};

exports.ProcessType = exports.$Enums.ProcessType = {
  INITIAL: 'INITIAL',
  FOLLOW_UP: 'FOLLOW_UP',
  FINAL: 'FINAL'
};

exports.ProcessStatus = exports.$Enums.ProcessStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.BudgetStatus = exports.$Enums.BudgetStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.PaymentType = exports.$Enums.PaymentType = {
  CASH: 'CASH',
  CREDIT_CARD: 'CREDIT_CARD',
  DEBIT_CARD: 'DEBIT_CARD',
  TRANSFER: 'TRANSFER',
  OTHER: 'OTHER'
};

exports.WeekDay = exports.$Enums.WeekDay = {
  MONDAY: 'MONDAY',
  TUESDAY: 'TUESDAY',
  WEDNESDAY: 'WEDNESDAY',
  THURSDAY: 'THURSDAY',
  FRIDAY: 'FRIDAY',
  SATURDAY: 'SATURDAY',
  SUNDAY: 'SUNDAY'
};

exports.Prisma.ModelName = {
  User: 'User',
  Patient: 'Patient',
  HealthInsuranceProvider: 'HealthInsuranceProvider',
  HealthInsuranceAuthorization: 'HealthInsuranceAuthorization',
  LegalGuardian: 'LegalGuardian',
  Professional: 'Professional',
  ProfessionalType: 'ProfessionalType',
  ConsultationPrice: 'ConsultationPrice',
  Admin: 'Admin',
  Root: 'Root',
  Admission: 'Admission',
  Event: 'Event',
  Process: 'Process',
  Budget: 'Budget',
  Payment: 'Payment',
  Schedule: 'Schedule',
  AdmissionType: 'AdmissionType'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
