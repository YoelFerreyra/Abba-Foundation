generator client {
  provider = "prisma-client-js"
  output   = "../app/api/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int         @id @default(autoincrement())
  firebaseUid   String      @unique
  role          UserRoles   @default(CLIENT)
  email         String      @unique
  isActive      Boolean     @default(false)
  createdAt     DateTime    @default(now())
  image         String?

  patient       Patient?
  legalGuardian LegalGuardian?
  professional  Professional?
  createdEvents Event[]     @relation("EventCreator")
  createdProcesses Process[] @relation("ProcessCreator")
}

model Patient {
  id                   Int          @id @default(autoincrement())
  firstName            String
  lastName             String
  address              String
  dni                  String       @unique
  cuil                 String       @unique
  dniProcessingNumber  String
  birthday             DateTime
  phone                String
  affiliateNumber      String
  professionalActivity String?
  patientType          PatientType?
  patientStatus        PatientStatus?
  isActive             Boolean      @default(false)
  createdAt            DateTime     @default(now())

  userId               Int?         @unique
  user                 User?        @relation(fields: [userId], references: [id])

  legalGuardianId      Int?
  legalGuardian        LegalGuardian? @relation(fields: [legalGuardianId], references: [id])

  events               Event[]
  admission            Admission?

  healthInsuranceProviderId Int?
  healthInsuranceProvider   HealthInsuranceProvider? @relation(fields: [healthInsuranceProviderId], references: [id])
}

model HealthInsuranceProvider {
  id              Int                              @id @default(autoincrement())
  nickName        String?
  name            String  @unique
  description     String
  contractor      String?
  subcontractor   String?
  cuit            String
  address         String
  email           String
  phone           String
  contact         String
  webside         String?
  email           String?
  email2          String?
  email3          String?

  authorizations  HealthInsuranceAuthorization[]
  patients Patient[]
  legalGuardians LegalGuardian[]
  professionals Professional[]
}

model HealthInsuranceAuthorization {
  id                         Int                      @id @default(autoincrement())
  healthInsuranceProviderId  Int
  healthInsuranceProvider    HealthInsuranceProvider  @relation(fields: [healthInsuranceProviderId], references: [id])

  admissionId                Int
  admission                  Admission                @relation(fields: [admissionId], references: [id])

  service                    CoverageService
  periodFrom                 DateTime
  periodTo                   DateTime
  authorizedAt               DateTime
}

enum CoverageService {
  PSYCHOLOGY
  PSYCHOPEDAGOGY
  SPEECH_THERAPY
  SUPPORT_TEACHER_MODULE
  OCCUPATIONAL_THERAPY
  PSYCHOMOTOR_THERAPY
  THERAPY_TRANSPORT
  SCHOOL_TRANSPORT
  INTENSIVE_INTEGRAL_MODULE
  SIMPLE_INTEGRAL_MODULE
  SCHOOL_INCLUSION_SUPPORT_MODULE
}

model LegalGuardian {
  id                   Int       @id @default(autoincrement())
  firstName            String
  lastName             String
  address              String
  dni                  String
  cuil                 String
  dniProcessingNumber  String
  birthday             DateTime
  phone                String
  professionalActivity String
  legalGuardianType    LegalGuardianType?
  legalGuardianStatus  LegalGuardianStatus?
  isActive             Boolean   @default(false)
  createdAt            DateTime  @default(now())

  userId               Int? @unique
  user                 User?     @relation(fields: [userId], references: [id])

  patients             Patient[]
  healthInsuranceProviderId Int?
  healthInsuranceProvider   HealthInsuranceProvider? @relation(fields: [healthInsuranceProviderId], references: [id])
  admissions Admission[]
}

model Professional {
  id                      Int       @id @default(autoincrement())
  firstName               String
  lastName                String
  address                 String
  dni                     String  @unique
  cuil                    String  @unique
  birthday                DateTime
  phone                   String
  professionalActivity    String
  isActive                Boolean   @default(false)
  professionalType        String
  licenseNumber           String  @unique

  userId                  Int? @unique
  user                    User?     @relation(fields: [userId], references: [id])

  events                  Event[]
  schedules               Schedule[]

  healthInsuranceProviderId Int?
  healthInsuranceProvider   HealthInsuranceProvider? @relation(fields: [healthInsuranceProviderId], references: [id])
}

model Admission {
  id                    Int                @id @default(autoincrement()) // Nro. de ingreso
  operationDate         DateTime          @default(now())               // Fecha operaci√≥n
  admissionDate         DateTime                                     // Fecha ingreso editable
  admissionTypeId       Int
  admissionType         AdmissionType      @relation(fields: [admissionTypeId], references: [id]) // Tipo de ingreso
  isSchoolEnrolled      Boolean                                           // Escolarizado
  schoolShift           SchoolShift?                                     // Turno colegio

  patientId             Int               @unique
  patient               Patient           @relation(fields: [patientId], references: [id])
  cud                   String?                                           
  cudExpirationDate     DateTime?                                         
  status                AdmissionStatus?

  legalGuardianId              Int?
  legalGuardian                LegalGuardian?            @relation(fields: [legalGuardianId], references: [id])

  createdAt             DateTime           @default(now())
  healthInsuranceAuthorizations HealthInsuranceAuthorization[]
}


model Event {
  id             Int       @id @default(autoincrement())
  title          String
  description    String?
  startEvent     DateTime
  endEvent       DateTime
  eventType      EventType @default(CONSULTATION)
  createdAt      DateTime  @default(now())
  status         EventStatus @default(AVAILABLE)

  createdById    Int
  createdBy      User      @relation("EventCreator", fields: [createdById], references: [id])

  professionalId Int
  professional   Professional @relation(fields: [professionalId], references: [id])

  patientId      Int?
  patient        Patient?      @relation(fields: [patientId], references: [id])
}

model Process {
  id             Int       @id @default(autoincrement())
  title          String
  description    String?
  processType    ProcessType
  processStatus  ProcessStatus
  createdAt      DateTime  @default(now())

  createdById    Int
  createdBy      User      @relation("ProcessCreator", fields: [createdById], references: [id])
}

model Budget {
  id             Int       @id @default(autoincrement())
  budgetStatus   BudgetStatus?
}

model Payment {
  id             Int       @id @default(autoincrement())
  paymentType    PaymentType
  description    String?
  createdAt      DateTime  @default(now())
}

model Schedule {
  id              Int       @id @default(autoincrement())
  professional    Professional @relation(fields: [professionalId], references: [id])
  professionalId  Int
  dayOfWeek       WeekDay
  startTime       String    // format: "08:00"
  endTime         String    // format: "12:00"
  sessionTime     Int       @default(30)
  repeatsWeekly   Boolean   @default(true)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
}

enum UserRoles {
  ROOT
  ADMIN
  CLIENT
  PROFESSIONAL
  ACCOUNTANT
}

enum PatientType {
  CHILD
  ADULT
  SENIOR
}

enum PatientStatus {
  ACTIVE
  INACTIVE
  DISCHARGED
  PENDING
}

enum LegalGuardianType {
  PARENT
  SIBLING
  OTHER
}

enum LegalGuardianStatus {
  ACTIVE
  INACTIVE
  VERIFIED
  UNVERIFIED
}

enum AdmissionStatus {
  PENDING_DOCUMENTATION
  DOCUMENTS_COMPLETED
  ADMITTED
  REJECTED
}

enum ProcessType {
  INITIAL
  FOLLOW_UP
  FINAL
}

enum ProcessStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum BudgetStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentType {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  TRANSFER
  OTHER
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum EventStatus {
  AVAILABLE
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum EventType {
  CONSULTATION
  STUDY
  OTHER
}

model AdmissionType {
  id    Int    @id @default(autoincrement())
  name  String // Ej: "Obra Social", "Particular", "Familiar", "Empleado"

  admissions Admission[]
}

enum SchoolShift {
  MORNING
  AFTERNOON
  EVENING
}

enum LegalGuardianCondition {
  RELACION_DEPENDENCIA
  MONOTRIBUTISTA
  OTROS
}
